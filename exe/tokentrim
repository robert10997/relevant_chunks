#!/usr/bin/env ruby
# frozen_string_literal: true

require "tokentrim"
require "optparse"
require "json"

options = {
  max_tokens: 1000,
  overlap_size: 100,
  parallel: false,
  format: "text"
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: tokentrim [options] <text_file> <query>"

  opts.on("-k", "--api-key KEY", "Anthropic API key") do |key|
    options[:api_key] = key
  end

  opts.on("-l", "--license-key KEY", "Commercial license key") do |key|
    options[:license_key] = key
  end

  opts.on("-t", "--max-tokens N", Integer, "Maximum tokens per chunk") do |n|
    options[:max_tokens] = n
  end

  opts.on("-o", "--overlap N", Integer, "Overlap size between chunks") do |n|
    options[:overlap_size] = n
  end

  opts.on("-p", "--[no-]parallel", "Enable parallel processing (requires license)") do |p|
    options[:parallel] = p
  end

  opts.on("-f", "--format FORMAT", %w[text json], "Output format (text/json)") do |f|
    options[:format] = f
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end

parser.parse!

if ARGV.length != 2
  puts parser
  exit 1
end

text_file, query = ARGV

begin
  text = File.read(text_file)
rescue StandardError => e
  puts "Error reading file: #{e.message}"
  exit 1
end

begin
  Tokentrim.configure do |config|
    config.api_key = options[:api_key] if options[:api_key]
    config.license_key = options[:license_key] if options[:license_key]
    config.max_tokens = options[:max_tokens]
    config.overlap_size = options[:overlap_size]
    config.parallel = options[:parallel]
  end

  results = Tokentrim.process(text, query)

  case options[:format]
  when "json"
    puts JSON.pretty_generate(results)
  else
    results.each.with_index(1) do |result, i|
      puts "Chunk #{i} (Score: #{result[:score]}):"
      puts "-" * 40
      puts result[:chunk]
      puts "\n"
    end
  end
rescue Tokentrim::Error => e
  puts "Error: #{e.message}"
  exit 1
end
